datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                     Int                   @default(autoincrement()) @id
  email                  String                @unique
  password               String
  accountType            AccountType           @default(Local)
  token                  WhiteList[]
  passwordChangeRequest PasswordChangeRequest?
  isEnabled              Boolean
  verificationToken      String?
  isTwoFaEnabled         Boolean               @default(false)
  twoFaSecret            String?
  hashedBackupCodes      String[]
  roles     ProjectUserRole[]
}

model Role {
  id          Int           @default(autoincrement()) @id
  name        String        @unique
  permissions Permission[]  @relation("RolePermissions")
  roles     ProjectUserRole[]
}

model Permission {
  id         Int                   @default(autoincrement()) @id
  feature    PermissionFeatureType
  canCreate  Boolean               @default(false)
  canRead    Boolean               @default(false)
  canUpdate  Boolean               @default(false)
  canDelete  Boolean               @default(false)
  roles      Role[]                @relation("RolePermissions") // Many-to-many relationship with Role
}

model WhiteList {
  id        Int      @default(autoincrement()) @id
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  expiresAt DateTime
}

model PasswordChangeRequest {
  id     Int    @default(autoincrement()) @id
  ID     String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int    @unique
}

model Project {
  id        String          @id @default(uuid())
  name      String
  users     ProjectUserRole[]
  // other project fields
}

model ProjectUserRole {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  project   Project @relation(fields: [projectId], references: [id])
  projectId String
  role      Role    @relation(fields: [roleId], references: [id])
  roleId    Int

  @@unique([userId, projectId]) // Ensures each user has only one role per project
}

enum AccountType {
  Local
  Google
  Github
}

enum PermissionFeatureType {
  UserManagement
  ProjectManagement
  TaskManagement
  MessagesManagement
}

